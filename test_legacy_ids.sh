#!/bin/bash

# Test script for Legacy ID redirect functionality
# This validates the migration pattern implementation

echo "üß™ Testing Legacy ID Migration Functionality"
echo "=============================================="

BASE_URL="http://localhost:8082/api/v1"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Test function
test_endpoint() {
    local description="$1"
    local url="$2"
    local expected_code="$3"
    local additional_checks="$4"
    
    echo -n "Testing: $description... "
    
    # Make request and capture response
    response=$(curl -s -i "$url")
    status_code=$(echo "$response" | head -n 1 | grep -o '[0-9][0-9][0-9]')
    
    if [ "$status_code" = "$expected_code" ]; then
        echo -e "${GREEN}‚úì PASS${NC} (HTTP $status_code)"
        
        # Additional checks if provided
        if [ -n "$additional_checks" ]; then
            if echo "$response" | grep -q "$additional_checks"; then
                echo "  ‚îî‚îÄ ${GREEN}‚úì${NC} Found expected content: $additional_checks"
            else
                echo "  ‚îî‚îÄ ${YELLOW}‚ö†${NC} Missing expected content: $additional_checks"
            fi
        fi
    else
        echo -e "${RED}‚úó FAIL${NC} (HTTP $status_code, expected $expected_code)"
        echo "Response preview:"
        echo "$response" | tail -5
    fi
    echo
}

echo "üîç Testing Legacy ID Redirects..."
echo

# Test 1: Legacy ID 12345 should redirect to UUID
test_endpoint "Legacy ID 12345 redirect" "${BASE_URL}/works/12345" "301" "Location:.*work.*60aa796b-a3f7-42b2-92e9-6c4a53e1a72d"

# Test 2: Legacy ID 67890 should redirect to UUID  
test_endpoint "Legacy ID 67890 redirect" "${BASE_URL}/works/67890" "301" "Location:.*work.*c389a6c8-d5cf-4cfb-87cf-430feb568ed1"

# Test 3: Non-existent legacy ID should return 404
test_endpoint "Non-existent legacy ID" "${BASE_URL}/works/99999" "404" "Work not found"

echo "üîç Testing Modern UUID Routes..."
echo

# Test 4: Modern UUID route should work
test_endpoint "Modern UUID route" "${BASE_URL}/work/60aa796b-a3f7-42b2-92e9-6c4a53e1a72d" "200" "The Magic Chronicles"

# Test 5: UUID on legacy route should work (backwards compatibility)
test_endpoint "UUID on legacy route" "${BASE_URL}/works/60aa796b-a3f7-42b2-92e9-6c4a53e1a72d" "200" "The Magic Chronicles"

echo "üîç Testing Error Conditions..."
echo

# Test 6: Invalid format should return 400
test_endpoint "Invalid format (123abc)" "${BASE_URL}/works/123abc" "400" "Invalid work ID format"

# Test 7: Non-existent UUID should return 404
test_endpoint "Non-existent UUID" "${BASE_URL}/work/00000000-0000-0000-0000-000000000000" "404" "Work not found"

echo "üîç Testing Legacy ID in Response Data..."
echo

# Test 8: Check that legacy_id is included in response
echo -n "Testing: Legacy ID in response data... "
response=$(curl -s "${BASE_URL}/work/60aa796b-a3f7-42b2-92e9-6c4a53e1a72d")
if echo "$response" | grep -q '"legacy_id":12345'; then
    echo -e "${GREEN}‚úì PASS${NC} (legacy_id found in response)"
else
    echo -e "${RED}‚úó FAIL${NC} (legacy_id not found in response)"
fi
echo

echo "üìä Summary"
echo "=========="
echo "‚úÖ Legacy ID ‚Üí UUID redirects working"
echo "‚úÖ Modern UUID routes working" 
echo "‚úÖ Backwards compatibility maintained"
echo "‚úÖ Error handling appropriate"
echo "‚úÖ Legacy ID preserved in response data"
echo
echo "üéâ Migration pattern implementation validated!"