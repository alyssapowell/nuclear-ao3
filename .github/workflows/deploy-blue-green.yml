name: üîÑ Blue-Green Nuclear AO3 Deploy

on:
  # Auto deploy main to staging
  push:
    branches: [main]
    
  # Manual deployment to any environment
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options: 
          - staging
          - production
        default: staging
      git_ref:
        description: 'Git ref to deploy (branch, tag, or commit SHA)'
        required: true
        default: main
      strategy:
        description: 'Deployment strategy'
        type: choice
        options:
          - blue-green
          - rolling
          - immediate
        default: blue-green

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: nuclear-ao3

jobs:
  # Test and validate
  test:
    name: üß™ Test & Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.git_ref || github.sha }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('backend/go.mod') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Go dependencies
        working-directory: backend
        run: go mod download

      - name: Run backend tests
        working-directory: backend
        run: go test ./... -v -race

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Test Docker builds
        run: |
          echo "üê≥ Testing critical service builds..."
          # Test a few key services to ensure build process works
          docker build -t nuclear-ao3/api-gateway:test -f backend/api-gateway/Dockerfile backend/
          docker build -t nuclear-ao3/auth-service:test -f backend/auth-service/Dockerfile backend/
          docker build -t nuclear-ao3/frontend:test frontend/

  # Deploy with zero downtime
  deploy:
    name: üîÑ Deploy to ${{ github.event.inputs.environment || 'staging' }}
    needs: [test]
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'staging' }}
      url: ${{ github.event.inputs.environment == 'production' && format('https://{0}', secrets.DOMAIN) || format('https://staging.{0}', secrets.DOMAIN) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.git_ref || github.sha }}

      - name: Set deployment variables
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
          
          if [ "${{ github.event.inputs.environment || 'staging' }}" = "production" ]; then
            echo "DEPLOY_ENV=production" >> $GITHUB_ENV
            echo "CONTAINER_PREFIX=nuclear-ao3-prod" >> $GITHUB_ENV
            echo "MAIN_PORT=80" >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
            echo "CONTAINER_PREFIX=nuclear-ao3-staging" >> $GITHUB_ENV
            echo "MAIN_PORT=8080" >> $GITHUB_ENV
          fi
          
          # Set deployment strategy
          echo "STRATEGY=${{ github.event.inputs.strategy || 'blue-green' }}" >> $GITHUB_ENV
          
          # Generate deployment color
          if [ "$(date +%s)" -eq "$(( $(date +%s) / 2 * 2 ))" ]; then
            echo "NEW_COLOR=blue" >> $GITHUB_ENV
            echo "OLD_COLOR=green" >> $GITHUB_ENV
          else
            echo "NEW_COLOR=green" >> $GITHUB_ENV
            echo "OLD_COLOR=blue" >> $GITHUB_ENV
          fi

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.HETZNER_SSH_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.HETZNER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy Nuclear AO3 (Blue-Green)
        if: env.STRATEGY == 'blue-green'
        env:
          HOST: ${{ secrets.HETZNER_HOST }}
          USER: ${{ secrets.HETZNER_USER }}
          GIT_REF: ${{ github.event.inputs.git_ref || github.sha }}
          DEPLOY_ENV: ${{ env.DEPLOY_ENV }}
          TIMESTAMP: ${{ env.TIMESTAMP }}
          NEW_COLOR: ${{ env.NEW_COLOR }}
          OLD_COLOR: ${{ env.OLD_COLOR }}
          CONTAINER_PREFIX: ${{ env.CONTAINER_PREFIX }}
          DOMAIN: ${{ secrets.DOMAIN }}
        run: |
          ssh $USER@$HOST 'bash -s' << 'EOF'
            set -e
            
            # Set variables from GitHub Actions
            DEPLOY_ENV="$DEPLOY_ENV"
            TIMESTAMP="$TIMESTAMP"
            GIT_REF="$GIT_REF"
            NEW_COLOR="$NEW_COLOR"
            OLD_COLOR="$OLD_COLOR"
            CONTAINER_PREFIX="$CONTAINER_PREFIX"
            DOMAIN="$DOMAIN"
            
            echo "üîÑ Starting BLUE-GREEN deployment of Nuclear AO3 to $DEPLOY_ENV..."
            echo "üì¶ Deploying ref: $GIT_REF"
            echo "‚è∞ Timestamp: $TIMESTAMP"
            echo "üé® New color: $NEW_COLOR, Old color: $OLD_COLOR"
            
            # Create deployment directory
            sudo mkdir -p /opt/nuclear-ao3
            sudo chown -R $(whoami):$(whoami) /opt/nuclear-ao3
            cd /opt/nuclear-ao3
            
            # Update code to specific ref
            if [ -d ".git" ]; then
              echo "üì• Fetching latest code..."
              git fetch origin
              git checkout $GIT_REF
              git pull origin $GIT_REF || true
            else
              echo "üì• Cloning repository..."
              rm -rf * .* 2>/dev/null || true
              git clone https://github.com/alyssapowell/nuclear-ao3.git .
              git checkout $GIT_REF
            fi
            
            # Set up environment for deployment
            echo "‚öôÔ∏è Setting up environment..."
            cp .env.example .env
            echo "ENVIRONMENT=$DEPLOY_ENV" >> .env
            echo "DOMAIN=$DOMAIN" >> .env
            echo "DEPLOY_COLOR=$NEW_COLOR" >> .env
            echo "DEPLOYMENT_TIMESTAMP=$TIMESTAMP" >> .env
            
            # Build all services with new color tag
            echo "üèóÔ∏è Building Nuclear AO3 services..."
            
            # Build backend services
            services=("auth-service" "work-service" "tag-service" "search-service" "notification-service" "export-service" "api-gateway")
            
            for service in "${services[@]}"; do
              echo "üê≥ Building $service..."
              docker build -t nuclear-ao3/$service:$DEPLOY_ENV-$NEW_COLOR-$TIMESTAMP \
                -f backend/$service/Dockerfile \
                backend/ || {
                echo "‚ùå Failed to build $service"
                exit 1
              }
              # Tag as latest for this color
              docker tag nuclear-ao3/$service:$DEPLOY_ENV-$NEW_COLOR-$TIMESTAMP \
                nuclear-ao3/$service:$DEPLOY_ENV-$NEW_COLOR
            done
            
            # Build frontend
            echo "üê≥ Building frontend..."
            docker build -t nuclear-ao3/frontend:$DEPLOY_ENV-$NEW_COLOR-$TIMESTAMP \
              --build-arg NEXT_PUBLIC_API_URL=http://localhost:8080 \
              frontend/ || {
              echo "‚ùå Failed to build frontend"
              exit 1
            }
            docker tag nuclear-ao3/frontend:$DEPLOY_ENV-$NEW_COLOR-$TIMESTAMP \
              nuclear-ao3/frontend:$DEPLOY_ENV-$NEW_COLOR
            
            echo "‚úÖ All services built successfully"
            
            # Stop old colored containers (but keep databases running)
            echo "üõë Stopping old $OLD_COLOR containers..."
            for service in "${services[@]}" "frontend"; do
              docker stop ${CONTAINER_PREFIX}-${service}-${OLD_COLOR} 2>/dev/null || echo "Container ${CONTAINER_PREFIX}-${service}-${OLD_COLOR} not running"
              docker rm ${CONTAINER_PREFIX}-${service}-${OLD_COLOR} 2>/dev/null || echo "Container ${CONTAINER_PREFIX}-${service}-${OLD_COLOR} not found"
            done
            
            # Start infrastructure services if not running (shared between colors)
            echo "üóÑÔ∏è Ensuring infrastructure services are running..."
            
            # PostgreSQL
            if ! docker ps | grep -q "${CONTAINER_PREFIX}-postgres"; then
              docker run -d \
                --name ${CONTAINER_PREFIX}-postgres \
                --restart unless-stopped \
                -p 5432:5432 \
                -e POSTGRES_DB=ao3_nuclear \
                -e POSTGRES_USER=ao3_user \
                -e POSTGRES_PASSWORD=ao3_password \
                -v nuclear-ao3-postgres-data:/var/lib/postgresql/data \
                postgres:15
              
              echo "‚è≥ Waiting for PostgreSQL to be ready..."
              sleep 15
            fi
            
            # Redis
            if ! docker ps | grep -q "${CONTAINER_PREFIX}-redis"; then
              docker run -d \
                --name ${CONTAINER_PREFIX}-redis \
                --restart unless-stopped \
                -p 6379:6379 \
                -v nuclear-ao3-redis-data:/data \
                redis:7-alpine
            fi
            
            # Elasticsearch
            if ! docker ps | grep -q "${CONTAINER_PREFIX}-elasticsearch"; then
              docker run -d \
                --name ${CONTAINER_PREFIX}-elasticsearch \
                --restart unless-stopped \
                -p 9200:9200 \
                -e discovery.type=single-node \
                -e xpack.security.enabled=false \
                -e "ES_JAVA_OPTS=-Xms1g -Xmx1g" \
                -v nuclear-ao3-es-data:/usr/share/elasticsearch/data \
                elasticsearch:8.9.0
              
              echo "‚è≥ Waiting for Elasticsearch to be ready..."
              sleep 30
            fi
            
            # Start new colored application containers
            echo "üöÄ Starting new $NEW_COLOR application containers..."
            
            # Start backend services with new color
            for service in "${services[@]}"; do
              port=""
              case $service in
                "auth-service") port="8081" ;;
                "work-service") port="8082" ;;
                "tag-service") port="8083" ;;
                "search-service") port="8084" ;;
                "notification-service") port="8085" ;;
                "export-service") port="8086" ;;
                "api-gateway") port="8080" ;;
              esac
              
              echo "üü¢ Starting $service on port $port..."
              docker run -d \
                --name ${CONTAINER_PREFIX}-${service}-${NEW_COLOR} \
                --restart unless-stopped \
                -p ${port}:${port} \
                -e DATABASE_URL=postgres://ao3_user:ao3_password@localhost:5432/ao3_nuclear?sslmode=disable \
                -e REDIS_URL=localhost:6379 \
                -e ELASTICSEARCH_URL=http://localhost:9200 \
                -e JWT_SECRET="${{ secrets.JWT_SECRET || 'nuclear-ao3-jwt-secret' }}" \
                -e JWT_ISSUER=nuclear-ao3 \
                -e ENVIRONMENT=$DEPLOY_ENV \
                -e GIN_MODE=release \
                --network host \
                nuclear-ao3/$service:$DEPLOY_ENV-$NEW_COLOR
            done
            
            # Start frontend with new color
            echo "üü¢ Starting frontend..."
            docker run -d \
              --name ${CONTAINER_PREFIX}-frontend-${NEW_COLOR} \
              --restart unless-stopped \
              -p 3000:3000 \
              -e NODE_ENV=production \
              -e NEXT_PUBLIC_API_URL=http://localhost:8080 \
              -e ENVIRONMENT=$DEPLOY_ENV \
              --network host \
              nuclear-ao3/frontend:$DEPLOY_ENV-$NEW_COLOR
            
            echo "‚è≥ Waiting for services to be healthy..."
            sleep 30
            
            # Health check new services
            echo "üß™ Testing new $NEW_COLOR services..."
            max_attempts=12
            attempt=0
            
            while [ $attempt -lt $max_attempts ]; do
              if curl -f http://localhost:8080/health >/dev/null 2>&1; then
                echo "‚úÖ API Gateway health check passed!"
                break
              else
                echo "‚è≥ Health check attempt $((attempt + 1))/$max_attempts..."
                sleep 10
                attempt=$((attempt + 1))
              fi
            done
            
            if [ $attempt -eq $max_attempts ]; then
              echo "‚ùå Health checks failed after $max_attempts attempts"
              echo "üîç Checking service logs..."
              docker logs ${CONTAINER_PREFIX}-api-gateway-${NEW_COLOR} --tail 20
              exit 1
            fi
            
            # Test individual services
            services_to_test=("8081" "8082" "8083" "8084")
            for port in "${services_to_test[@]}"; do
              if curl -f http://localhost:$port/health >/dev/null 2>&1; then
                echo "‚úÖ Service on port $port is healthy"
              else
                echo "‚ö†Ô∏è Service on port $port health check failed (may be expected)"
              fi
            done
            
            # Test frontend
            if curl -f http://localhost:3000 >/dev/null 2>&1; then
              echo "‚úÖ Frontend is responding"
            else
              echo "‚ö†Ô∏è Frontend health check failed"
            fi
            
            # Update Caddy routing to new color (if using Caddy)
            echo "üîÑ Updating load balancer configuration..."
            # This would update Caddy config to point to new colored containers
            # For now, we're using host networking so services are directly accessible
            
            echo "üßπ Cleaning up old images..."
            # Keep current + 1 previous image per service
            for service in "${services[@]}" "frontend"; do
              docker images nuclear-ao3/$service --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" | \
                grep -v REPOSITORY | \
                grep "$DEPLOY_ENV" | \
                sort -k2 -r | \
                tail -n +3 | \
                awk '{print $1}' | \
                xargs -r docker rmi || true
            done
            
            # Clean up Docker resources
            docker container prune -f || true
            docker image prune -f || true
            
            echo "üìä Deployment summary:"
            echo "Environment: $DEPLOY_ENV"
            echo "Color: $NEW_COLOR (replaced $OLD_COLOR)"
            echo "Timestamp: $TIMESTAMP"
            echo "Git ref: $GIT_REF"
            echo "Services deployed: ${#services[@]} + frontend"
            
            echo "‚úÖ BLUE-GREEN deployment to $DEPLOY_ENV complete!"
          EOF

      - name: Deploy Nuclear AO3 (Immediate/Rolling)
        if: env.STRATEGY != 'blue-green'
        env:
          HOST: ${{ secrets.HETZNER_HOST }}
          USER: ${{ secrets.HETZNER_USER }}
          GIT_REF: ${{ github.event.inputs.git_ref || github.sha }}
        run: |
          ssh $USER@$HOST << 'EOF'
            set -e
            
            echo "‚ö° Starting IMMEDIATE deployment to ${{ env.DEPLOY_ENV }}..."
            
            cd /opt/nuclear-ao3
            
            # Update code
            git fetch origin
            git checkout ${{ env.GIT_REF }}
            git pull origin ${{ env.GIT_REF }} || true
            
            # Use docker-compose for immediate deployment
            echo "üê≥ Using docker-compose for immediate deployment..."
            cp .env.example .env
            echo "ENVIRONMENT=${{ env.DEPLOY_ENV }}" >> .env
            echo "DOMAIN=${{ secrets.DOMAIN }}" >> .env
            
            # Stop services
            docker-compose down || true
            
            # Build and start services
            docker-compose build
            docker-compose up -d
            
            echo "‚úÖ Immediate deployment complete"
          EOF

      - name: Verify deployment health
        run: |
          echo "üîç Final deployment verification..."
          sleep 15
          
          if [ "${{ env.DEPLOY_ENV }}" = "production" ]; then
            test_url="https://${{ secrets.DOMAIN }}"
          else
            test_url="https://staging.${{ secrets.DOMAIN }}"
          fi
          
          for i in {1..5}; do
            if curl -f -s "$test_url/health" || curl -f -s "http://${{ secrets.HETZNER_HOST }}:8080/health"; then
              echo "‚úÖ Deployment verified - Nuclear AO3 is live!"
              break
            else
              echo "‚è≥ Verification attempt $i/5..."
              if [ $i -eq 5 ]; then
                echo "‚ùå Final verification failed"
                exit 1
              fi
              sleep 15
            fi
          done

      - name: Deployment Summary
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "üéâ SUCCESS: Nuclear AO3 deployed with ZERO DOWNTIME!"
            if [ "${{ env.DEPLOY_ENV }}" = "production" ]; then
              echo "üåç Production URL: https://${{ secrets.DOMAIN }}"
            else
              echo "üß™ Staging URL: https://staging.${{ secrets.DOMAIN }}"
            fi
            echo "üì¶ Git ref: ${{ github.event.inputs.git_ref || github.sha }}"
            echo "üé® Strategy: ${{ env.STRATEGY }}"
            echo "üïê Deploy time: ${{ env.TIMESTAMP }}"
            echo "üèÉ‚Äç‚ôÇÔ∏è Triggered by: ${{ github.actor }}"
            if [ "${{ env.STRATEGY }}" = "blue-green" ]; then
              echo "üîÑ Active color: ${{ env.NEW_COLOR }}"
            fi
          else
            echo "üí• FAILED: Nuclear AO3 deployment to ${{ env.DEPLOY_ENV }} failed"
            echo "üîÑ No changes made to live site"
            exit 1
          fi